#!/bin/bash
set -eu

help_msg="
Run a VM from a disk in QVM_DIR/machines.
Optionally enable cloud-init served over HTTP at CLOUD_INIT_ADDR.

Usage: $(basename "$0") [-n] [-d] [-i CLOUD_INIT_ADDR] VM_NAME[.qcow2]
"

: "${QVM_DIR:-$(pwd)}"
declare -r QVM_DIR
declare -r MACHINES_DIR="${QVM_DIR}/machines"
declare -r RUNTIME_DIR="${QVM_DIR}/run"

declare dry_run cloud_init_addr detach

dry_run=0
detach=0

while getopts hn:i:d opt; do
  case "${opt}" in
    n)
      dry_run=1 ;;
    h)
      echo "${help_msg}"
      exit ;;
    i)
      cloud_init_addr="${OPTARG}" ;;
    d)
      detach=1 ;;
    *)
      exit 1 ;;
  esac
done
shift $((OPTIND - 1))

declare vm="${1:-}"

if [[ -z "${vm}" ]]; then
  echo "ERROR: required argument: VM_NAME"
  exit 1
fi

drive="${MACHINES_DIR}/${vm}.qcow2"
if ! [[ -f "${drive}" ]]; then
  echo "ERROR: ${drive} not found."
  exit
fi

declare -a cmd args
if ((dry_run)); then
  cmd=(echo)
fi

cmd+=(qemu-system-x86_64)

declare -a args=(
  -accel kvm
  -cpu host
  -smp 4
  -m 8G
  -drive "file=${drive},if=virtio"
  -drive "if=pflash,format=raw,readonly=on,file=/usr/share/edk2/ovmf/OVMF_CODE.fd"
)

# Boot options
if [[ -n "${cloud_init_addr:-}" ]]; then
  echo "INFO: Running with cloud-init served at http://${cloud_init_addr}"
  args+=(-smbios "type=1,serial=ds=nocloud;s=http://${cloud_init_addr}")
fi

# Networking
# Assumes an independently managed qvm0 bridge,
# with TAP ports qvm0tap{1,2,3}

declare -A macs ifs

macs=(
  cp "52:54:3b:7b:ca:11"
  wk-1 "52:54:50:67:15:55"
  wk-2 "52:54:0b:a0:c2:15"
)

ifs=(
  cp qvm0tap0
  wk-1 qvm0tap1
  wk-2 qvm0tap2
)

ifname="${ifs[${vm}]}"
macaddr="${macs[${vm}]:-}"
if [[ -z "${macaddr:-}" ]]; then
  printf -v macaddr "52:54:%02x:%02x:%02x:%02x" \
         $(( $RANDOM & 0xff)) $(( $RANDOM & 0xff)) \
         $(( $RANDOM & 0xff)) $(( $RANDOM & 0xff))
fi

args+=(-nic "tap,script=no,downscript=no,ifname=${ifname:-qvm0tap0},mac=${macaddr}")

# Headless mode (-d option), as opposed to graphical QEMU display
# I experiment with the different variants below.

# Monitor and VM serial port available on distinct plain TCP ports
tcp_distinct=(
  -display none
  -monitor "tcp::2300,server=on"
  -serial "tcp::2301,server=on"
)

# Monitor and VM serial port available on distinct telnet ports
telnet_distinct=(
  -display none
  -monitor "telnet::2300,server=on"
  -serial "telnet::2301,server=on"
)

# Monitor and VM serial port multiplexed on a telnet port
# Do not wait for a connection to start the VM
# This one is nice!
telnet_multiplex=(
  -display none
  -serial "mon:telnet::2300,server=on,wait=off"
)

# Starts completely in the background,
# with Qemu console and serial port multiplexed on a TCP port.
daemon=(
  -daemonize
  -pidfile "${RUNTIME_DIR}/${vm}".pid
  "${telnet_multiplex[@]}"
)

declare -n variant
variant=telnet_distinct
if ((detach)); then
  args+=(
    "${variant[@]}"
  )
fi

"${cmd[@]}" "${args[@]}"
